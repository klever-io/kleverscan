import { screen, waitFor } from '@testing-library/react';
import React from 'react';
import theme from '../../../../styles/theme';
import { renderWithTheme } from '../../../../test/utils';
import { INodeCard } from '../../../../types';
import NodeCards from './';

global.ResizeObserver = jest.fn().mockImplementation(() => ({
  observe: jest.fn(),
  unobserve: jest.fn(),
  disconnect: jest.fn(),
}));
const mockCardData: INodeCard[] = [
  {
    title: 'Total Nodes',
    headers: ['Values', 'Increase'],
    values: ['85', '0%'],
    chartType: 'chart',
    chartData: [{ value: 10 }, { value: 9 }, { value: 12 }, { value: 10 }],
  },
  {
    title: 'Most Nodes',
    headers: ['Country', 'Nodes'],
    values: ['United States of America', '48'],
    chartType: 'map',
    chartOptions: {
      scale: '6.236730705764038, 6.236730705764038',
      translate: '-30.72932777777778 -72.5616388888889',
    },
    chartData: [
      'M47.323566666666665,72.5616388888889 47.422222222222224,72.86666666666666 47.59492222222222,72.9607 47.98285,72.99485555555555 48.55,73.08333333333334 49.08888888888889,73.25555555555556 49.53888888888889,73.18333333333332 50.22222222222222,73.32777777777778 50.403935,73.32232888888888 50.90104777777778,73.16504555555555 51.422337222222225,73.36666666666666 51.965560555555555,73.5814788888889 52.41535388888889,73.76654500000001 52.84662222222222,73.94439833333334 52.90042333333333,74.09049888888889 53.03125055555555,74.14517555555555 52.997277777777775,74.20022222222222 53.14627777777778,74.21735 53.254377777777776,74.15987444444444 53.282304999999994,74.29143388888889 53.39401944444444,74.379485 53.54659388888889,74.379485 53.62802722222222,74.44739666666666 53.55952722222222,74.54617 54.138374999999996,74.806935 54.256798333333336,75.31111111111112 54.367976666666664,75.79384 54.20555555555555,76.12222222222222 53.94444444444444,76.42777777777778 53.822222222222216,76.62222222222223 53.81,76.68017722222221 53.87232777777778,76.75955777777777 54.06106166666667,76.84716388888889 54.200401111111105,76.84716388888889 54.84569611111111,76.55054111111112 55.41808444444444,76.46322222222223 56.144798888888886,76.18688277777778 56.15555555555555,76.13055555555555 56.105555555555554,75.96111111111111 56.01573666666667,75.85203388888888 56.26651111111111,75.76383944444444 56.812286111111106,75.76163555555556 57.32220333333333,75.76178666666667 57.5,75.54530055555556 57.56944444444444,75.50204999999998 58.15655,75.10197222222222 58.40722222222222,74.99973333333332 59.25120555555555,74.99589999999999 60.274966666666664,74.99544444444444 60.330555555555556,74.85833333333333 60.508433333333336,74.83042222222223 60.74444444444445,74.74444444444444 60.94166666666666,74.49166666666667 61.111127777777774,74.05940555555556 61.534879999999994,73.64012166666667 61.71944444444444,73.78611111111111 62.09197777777777,73.69174444444444 62.338633333333334,73.85202222222222 62.33814444444444,74.60955 62.70143888888889,74.92359444444445 62.79741111111111,75.10572222222223 62.20415555555555,75.37488888888889 61.63333333333333,75.56666666666668 61.046572222222224,75.73108333333333 60.75251333333333,76.06097888888888 60.65839444444444,76.18594444444444 60.65277777777777,76.48055555555555 60.83611111111111,76.77499999999999 61.06666666666666,76.78888888888889 61.00833333333333,76.58611111111111 61.175016666666664,76.70953888888889 61.130538888888886,76.86823888888888 60.75555555555555,76.95833333333333 60.48867222222222,76.94752777777778 60.077777777777776,77.04444444444445 59.83611111111111,77.07222222222221 59.51309444444444,77.09963888888889 59.050000000000004,77.26049888888888 59.865966666666665,77.15584444444444 60.03055555555556,77.2611111111111 59.25277777777778,77.42777777777778 58.89888888888889,77.42888888888889 58.915375,77.36069444444445 58.746272222222224,77.51471666666666 58.909755555555556,77.54020555555556 58.789788888888886,77.9393 58.38553333333333,78.36692222222223 58.34421666666666,78.22422222222222 58.222211111111115,78.19530555555556 58.039972222222225,78.05638888888889 58.15555555555556,78.35555555555555 58.293425,78.45442666666666 58.30181666666667,78.66437777777777 58.12362777777778,78.88027222222222 57.81098333333333,79.32395 57.76040555555555,79.3018888888889 57.93219444444445,78.92386111111111 57.64840555555555,78.71154722222222 57.583333333333336,78.25 57.47626388888889,78.49021388888889 57.59481666666667,78.84263333333334 57.227778888888885,78.75556 57.61021111111111,78.93447499999999 57.63403333333333,79.46311111111112 57.79344444444444,79.5015222222222 57.85108888888889,79.69375 57.92917222222222,80.2495888888889 57.57601111111111,80.66192222222223 57.00131388888889,80.82666111111111 56.63613333333333,81.15251666666667 56.358694444444446,81.18815 56.07740555555555,81.39225 55.998016666666665,81.57867222222222 55.388152777777776,81.93924722222222 55.07501111111111,82.20372222222223 54.81317222222222,82.53306111111111 54.72754444444444,82.92778333333334 54.825716666666665,83.31360000000001 55.011111111111106,83.78888888888888 55.258008333333336,84.18215000000001 55.261111111111106,84.42222222222223 55.524145,85.06666666666666 55.506658333333334,85.44124166666667 55.48246666666667,85.65734722222221 55.343872222222224,85.99657777777777 55.17777777777777,86.06666666666668 54.90437222222222,85.9993 54.81666666666666,85.75555555555556 54.605555555555554,85.62777777777778 54.31111111111111,85.15 54.05269444444444,84.72497777777778 53.9693,84.50764444444445 54.08333333333333,84.13888888888889 53.92777777777777,83.83333333333333 53.49467222222222,83.36857777777779 53.27777777777778,83.28333333333333 52.71732222222222,83.53547222222223 52.617866666666664,83.50771111111112 52.348277777777774,83.24855 51.99999999999999,83.1111111111111 51.37202222222222,83.18092777777778 50.878988888888884,83.1195 50.45528333333333,83.15778888888889 50.22564944444444,83.24444777777776 50.32570277777778,83.39211666666667 50.31666666666666,83.61742222222222 50.43462777777778,83.72717777777778 50.328761111111106,83.80021666666667 50.12262222222222,83.71825555555556 49.914094444444444,83.82364999999999 49.51098611111111,83.80636944444444 49.09623055555556,83.51277777777779 48.61163333333333,83.58205555555556 48.20757222222222,83.45347222222222 47.86198888888889,83.49242777777778 47.394444444444446,83.62222222222222 46.88874444444444,84.03409444444445 46.33664444444444,84.27362222222222 46.03333333333333,84.53888888888889 45.90555555555555,84.78888888888889 45.9,85.17222222222222 45.92777777777778,85.43888888888888 46.03333333333333,85.62777777777778 45.81666666666666,85.64444444444445 45.422222222222224,85.52222222222223 44.98888888888889,85.35 44.833333333333336,85.08888888888889 44.711111111111116,84.7 44.38333333333333,84.38333333333333 44.1912,84.0577111111111 43.912444444444446,83.67738333333334 43.520888888888884,83.45594444444444 43.06666666666666,83.46666666666667 42.71666666666667,83.90555555555555 42.25555555555555,83.73888888888888 41.96835,83.57113333333334 41.83013888888889,83.26570555555554 41.64590555555556,82.97554444444444 41.31578333333333,82.73120555555555 41.03172222222222,82.55558333333333 40.82911666666667,82.3586 39.86666666666667,82.35841444444445 39.86558888888889,82.58765555555556 39.425000000000004,82.58781111111111 38.32021666666666,82.59182222222222 37.05278888888889,82.20047777777778 36.21388888888889,81.93039999999999 36.26589444444444,81.8217611111111 35.56036111111111,81.88200555555555 34.92902222222222,81.92481111111111 34.835589999999996,81.64098611111112 34.47555555555555,81.32153555555554 34.21633222222222,81.25505055555556 34.15561388888889,81.09567666666666 33.843888888888884,81.06777777777778 33.645088333333334,80.91751277777777 33.12901111111111,80.86271666666666 32.9873,80.77302777777777 32.91981666666666,80.46841111111111 32.38079444444445,79.91026111111111 31.918072222222218,79.13791111111111 31.93777222222222,79.00922777777778 31.692672222222217,78.82571666666666 31.262666666666668,78.36018888888889 31.186016666666664,77.90722777777778 30.88996111111111,77.60377777777778 31.011744444444442,77.14332222222222 30.992388888888886,76.66686666666666 30.81508888888889,76.24111666666667 31.032144444444445,75.71756666666666 31.09970277777778,75.21339166666667 31.167261111111113,74.70921666666666 31.066869444444446,73.96402777777777 30.891294444444448,73.48879444444445 30.72932777777778,73.23087055555554 30.796610555555553,73.12238055555555 31.599999999999998,73.31111111111112 31.895911111111108,73.83555555555556 32.03333333333333,73.68888888888888 31.944444444444443,73.23333333333333 31.755555555555553,72.77777777777777 33.333333333333336,72.77777777777777 34.982661111111106,72.77777777777777 35.52878888888889,72.77777777777777 37.22222222222222,72.77777777777777 38.861111111111114,72.77777777777777 40.52777777777778,72.77777777777777 42.19541111111111,72.77785555555555 44.08333333333333,72.77777777777777 45.98404444444444,72.7773888888889 47.13385,72.77777777777777 47.135505555555554,72.56430555555555 47.323566666666665,72.5616388888889Z',
    ],
  },
];

describe('Componenet: NodeCards', () => {
  beforeAll(() => {
    jest
      .spyOn(HTMLElement.prototype, 'clientHeight', 'get')
      .mockReturnValue(100);
    jest
      .spyOn(HTMLElement.prototype, 'clientWidth', 'get')
      .mockReturnValue(100);
  });

  it('Should render "Title", "Time ago" and the charts for the data', async () => {
    renderWithTheme(<NodeCards cardData={mockCardData} />);
    await waitFor(async () => {
      const timeAgo = screen.getAllByText(/secs? ago/i);
      const totalNodes = timeAgo[0].previousSibling;
      const mostNodes = timeAgo[1].previousSibling;
      const chart = totalNodes?.parentNode?.nextSibling;
      const mapSvg = mostNodes?.parentNode?.nextSibling;

      expect(timeAgo[0]).toBeInTheDocument();
      expect(timeAgo[1]).toBeInTheDocument();
      expect(totalNodes?.firstChild).toBeInTheDocument();
      expect(totalNodes?.firstChild).toHaveTextContent(mockCardData[0].title);
      expect(mostNodes?.firstChild).toBeInTheDocument();
      expect(mostNodes?.firstChild).toHaveTextContent(mockCardData[1].title);
      expect(mapSvg?.firstChild).toHaveAttribute('viewBox', '0 0 200 120');
      expect(chart?.firstChild).toHaveStyle({ width: '100%', height: '100%' });
    });
    await waitFor(
      async () => {
        const secsAgo = await screen.findAllByText(/4 secs ago/i);
        expect(secsAgo[0]).toHaveTextContent('4 secs ago');
      },
      { timeout: 5000 },
    );
  });

  it('Should match the style for the CardContainer and the Card', () => {
    const cardContainer = renderWithTheme(<NodeCards cardData={mockCardData} />)
      .container.firstChild;
    const cardContainerStyle = {
      margin: '1.5rem 0',
      display: 'flex',
      flexDirection: 'row',
      gap: '0.75rem',
    };
    const cardStyle = {
      width: '100%',
      padding: '1.5rem',
      overflow: 'hidden',
      display: 'flex',
      justifyContent: 'space-between',
      backgroundColor: theme.white,
      borderRadius: '1rem',
      gap: '1rem',
    };

    expect(cardContainer).toHaveStyle(cardContainerStyle);
    expect(cardContainer?.firstChild).toHaveStyle(cardStyle);
  });
});
